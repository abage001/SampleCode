apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-582
  namespace: default
  generation: 2
  labels:
    app.kubernetes.io/instance: nginx-582
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.29.1
    helm.sh/chart: nginx-21.1.23
  annotations:
    deployment.kubernetes.io/revision: '1'
    meta.helm.sh/release-name: nginx-582
    meta.helm.sh/release-namespace: default
  selfLink: /apis/apps/v1/namespaces/default/deployments/nginx-582
status:
  observedGeneration: 2
  replicas: 2
  updatedReplicas: 2
  conditions:
    - type: Progressing
      status: 'True'
      reason: NewReplicaSetAvailable
    - type: Available
      status: 'True'
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/instance: nginx-582
      app.kubernetes.io/name: nginx
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: nginx-582
        app.kubernetes.io/name: nginx
        app.kubernetes.io/version: 1.29.1
        helm.sh/chart: nginx-21.1.23
    spec:
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: certificate
          secret:
            secretName: nginx-582-tls
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
            defaultMode: 420
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/nginx:1.29.1-debian-12-r0
          command:
            - /bin/bash
          args:
            - '-ec'
            - >
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh

              # We copy the logs folder because it has symlinks to stdout and
              stderr

              if ! is_dir_empty /opt/bitnami/nginx/logs; then
                cp -r /opt/bitnami/nginx/logs /emptydir/app-logs-dir
              fi
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
                - ALL
            privileged: false
            seLinuxOptions: {}
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.29.1-debian-12-r0
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          env:
            - name: BITNAMI_DEBUG
              value: 'false'
            - name: NGINX_HTTP_PORT_NUMBER
              value: '8080'
            - name: NGINX_HTTPS_PORT_NUMBER
              value: '8443'
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: certificate
              mountPath: /certs
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
                - ALL
            privileged: false
            seLinuxOptions: {}
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: nginx-582
      serviceAccount: nginx-582
      automountServiceAccountToken: false
      shareProcessNamespace: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: nginx-582
                    app.kubernetes.io/name: nginx
                topologyKey: kubernetes.io/hostname
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

